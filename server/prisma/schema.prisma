
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Product {
  id             String   @id @default(uuid())
  slug           String   @unique
  title          String
  mainImage      String
  price          Int      @default(0)
  originalPrice  Float?
  rating         Int      @default(0)
  description    String
  manufacturer   String
  inStock        Int      @default(1)
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Wishlist       Wishlist[]
  customerOrders customer_order_product[]
}

model Image {
  imageID   String @id @default(uuid())
  productID String
  image     String
}

model User {
  id       String     @id @default(uuid())
  email    String     @unique
  name     String?
  password String?
  role     String?    @default("user")
  Wishlist Wishlist[]
}

model Customer_order {
  id          String                   @id @default(uuid())
  name        String
  lastname    String
  phone       String
  email       String
  company     String
  adress      String
  apartment   String
  postalCode  String
  dateTime    DateTime?                @default(now())
  status      String
  city        String
  country     String
  orderNotice String?
  total       Int
  products    customer_order_product[]
}

model customer_order_product {
  id              String         @id @default(uuid())
  customerOrderId String
  productId       String
  quantity        Int
  customerOrder   Customer_order @relation(fields: [customerOrderId], references: [id])
  product         Product        @relation(fields: [productId], references: [id])
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Wishlist {
  id        String  @id @default(uuid())
  productId String
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/* Matches landing page UI */
model LandingOrder {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  fullName        String
  phoneNumber     String
  whatsappNumber  String?
  state           String
  deliveryAddress String
  package         String
  concerns        Json?

  status          String   @default("pending")
  ip              String?
  userAgent       String?

  @@index([createdAt], map: "idx_landingorder_createdAt")
  @@index([state], map: "idx_landingorder_state")
  @@index([phoneNumber], map: "idx_landingorder_phone")
}
